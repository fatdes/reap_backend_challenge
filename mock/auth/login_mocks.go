// Code generated by MockGen. DO NOT EDIT.
// Source: login_rest.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoginDB is a mock of LoginDB interface.
type MockLoginDB struct {
	ctrl     *gomock.Controller
	recorder *MockLoginDBMockRecorder
}

// MockLoginDBMockRecorder is the mock recorder for MockLoginDB.
type MockLoginDBMockRecorder struct {
	mock *MockLoginDB
}

// NewMockLoginDB creates a new mock instance.
func NewMockLoginDB(ctrl *gomock.Controller) *MockLoginDB {
	mock := &MockLoginDB{ctrl: ctrl}
	mock.recorder = &MockLoginDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginDB) EXPECT() *MockLoginDBMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoginDB) Create(username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLoginDBMockRecorder) Create(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoginDB)(nil).Create), username, password)
}

// Exists mocks base method.
func (m *MockLoginDB) Exists(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockLoginDBMockRecorder) Exists(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockLoginDB)(nil).Exists), username)
}

// Login mocks base method.
func (m *MockLoginDB) Login(username, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginDBMockRecorder) Login(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginDB)(nil).Login), username, password)
}

// MockLoginTokenGenerator is a mock of LoginTokenGenerator interface.
type MockLoginTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockLoginTokenGeneratorMockRecorder
}

// MockLoginTokenGeneratorMockRecorder is the mock recorder for MockLoginTokenGenerator.
type MockLoginTokenGeneratorMockRecorder struct {
	mock *MockLoginTokenGenerator
}

// NewMockLoginTokenGenerator creates a new mock instance.
func NewMockLoginTokenGenerator(ctrl *gomock.Controller) *MockLoginTokenGenerator {
	mock := &MockLoginTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockLoginTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginTokenGenerator) EXPECT() *MockLoginTokenGeneratorMockRecorder {
	return m.recorder
}

// NewToken mocks base method.
func (m *MockLoginTokenGenerator) NewToken(username string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", username)
	ret0, _ := ret[0].(string)
	return ret0
}

// NewToken indicates an expected call of NewToken.
func (mr *MockLoginTokenGeneratorMockRecorder) NewToken(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockLoginTokenGenerator)(nil).NewToken), username)
}
